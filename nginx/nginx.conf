user  nginx;
# 配置为服务器CPU核数 grep -c processor /proc/cpuinfo
worker_processes  2;
# 绑定 Nginx 进程到不同的 CPU 上
# 2核CPU的配置
worker_cpu_affinity 01 10;
# 4核CPU的配置
#worker_cpu_affinity 0001 0010 0100 1000;
# 8核CPU的配置
#worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 1000000;

# worker 进程打开的最大文件数，可设置为 ulimit -n 的结果
worker_rlimit_nofile 65536;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    # nginx的连接处理机制在于不同的操作系统会采用不同的I/O模型，在不指定事件处理模型时，nginx默认会自动选择最佳的事件处理模型服务
    # Linux使用epoll的I/O多路复用模型
    # freebsd使用kqueue的IO多路复用模型
    # solaris使用/dev/pool方式的IO多路复用模型
    # windows使用的icop等等
    use epoll;
    # 设置每一个 worker 进程可以并发处理的最大连接数。该值不能超过 worker_rlimit_nofile的值
    worker_connections  30000;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # 开启文件的高效传输模式
    sendfile        on;
    # 需要在sendfile开启模式才有效，防止网路阻塞，积极的减少网络报文段的数量。将响应头和正文的开始部分一起发送，而不一个接一个的发送
    tcp_nopush     on;
    # 数据在传输的过程中不进缓存
    tcp_nodelay   on;

    keepalive_timeout  60;
    # 隐藏版本信息
    server_tokens off;


    #表示开启压缩功能
    gzip on;
    #压缩版本
    gzip_http_version 1.1;
    # IE6对Gzip支持效果较差，所以针对它不启用
    gzip_disable "MSIE [1-6]\.";
    #表示允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩，建议设置成大于1K。如果小于1K可能会越压越大
    gzip_min_length  1k;
    #压缩缓存区大小
    gzip_buffers     4 32k;
    #压缩比率， 一般选择4-6，为了性能
    gzip_comp_level 5;
    ##指定压缩的类型
    gzip_types text/css text/javascript text/xml text/plain application/json application/javascript application/x-javascript application/xml application/xml+rss;
    #添加“Vary: Accept-Encoding”响应头，这个值可以让前端的缓存服务器缓存经过GZIP压缩的页面
    gzip_vary on;


    include /etc/nginx/conf.d/*.conf;
}